{
  "name": "Multiplayer Game Development with Node.js, Socket.IO, and HTML5 Canvas (Stuyvesant Softdev 2016)",
  "tagline": "Multiplayer Game Development with Node.js, Socket.IO, and HTML5 Canvas (Stuyvesant Softdev 2016)",
  "body": "### Multiplayer Game Development with Node.js, Socket.IO, and HTML5 Canvas (Stuyvesant Softdev 2016)\r\nThis guide assumes you already know about object-oriented programming in JavaScript and object serialization. This is a high level overview on how to stitch together a multiplayer game from these elements and will be done entirely in JavaScript. You should have some familiarity with NodeJS servers as well. This guide will focus more on the high level structures needed to implement such a game and may leave out syntactical documentation. Resources for each of the elements needed will be linked if you need to learn the syntax for it.\r\n\r\n### Overview\r\nWe will be using NodeJS, Socket.IO, and the HTML5 Canvas to create a multiplayer JavaScript game. The control flow of this application is relatively straightforward. The server will act as a central relay that all clients will be connected to via WebSockets. Each client will send user input to the server, which is then processed and used to update the state of the entities/objects/players on the server. The server will be constantly sending back the state of the server so that the client can render it on the canvas.\r\n\r\n##Setup\r\nSince we have not discussed NodeJS in class, I will include a few quick scripts to help you set up your environment. I will not be discussing the specifics of Node and the V8 JavaScript engine, so check out the NodeJS documentation if you want to learn more about Node.\r\n```bash\r\n# Install nvm (Node Version Manager)\r\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\r\n# Install NodeJS version 0.12.10\r\nnvm install 0.12.10\r\n# Make a directory for your project\r\n# You should also create any other necessary folders (/lib, /public, /views, etc)\r\nmkdir your_project\r\ncd your_project\r\nmkdir public\r\n# Initialize a node project (npm is the node package manager, analogous to pip for Python)\r\nnpm init\r\n# We will be using the ExpressJS framework for this guide.\r\nnpm install --save express socket.io\r\n```\r\n\r\nYour server.js app script should look something like this:\r\n(Please note that this is a stripped implementation for demo purposes and that you should take advantage of Express and templating engines if you actually build a project)\r\n```\r\n// Dependencies.\r\nvar express = require('express');\r\nvar socketIO = require('socket.io');\r\n\r\n// Initialization.\r\nvar app = express();\r\nvar server = http.Server(app);\r\n\r\napp.set('port', PORT_NUMBER);\r\n\r\napp.use('/public',\r\n        express.static(__dirname + '/public'));\r\n\r\napp.use('/', function(request, response) {\r\n  response.sendFile(__dirname + '/index.html');\r\n});\r\n\r\nio.on('connection', function(socket) {\r\n});\r\n\r\nsetInterval(function() {\r\n  // The server side updating will take place here.\r\n}, 1000 / 60);\r\n\r\n// Starts the server.\r\nserver.listen(PORT_NUMBER, function() {\r\n  console.log('STARTING SERVER ON PORT ' + PORT_NUMBER);\r\n});\r\n```\r\n\r\n### Authors and Contributors\r\nCreated by @omgimanerd\r\nCheck out some of my creations @penumbragames (They may take time to load as they are hosted on Heroku free tier)\r\n[Tank Anarchy](http://tankanarchy.herokuapp.com)\r\n[Obsidio](http://obsidio.herokuapp.com)\r\n[Git To The Hub](http://gittothehub.tech)\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and weâ€™ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}